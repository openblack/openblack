file(GLOB_RECURSE OPENBLACK_SOURCES "${CMAKE_CURRENT_LIST_DIR}/*.cpp")
list(REMOVE_ITEM OPENBLACK_SOURCES main.cpp)
file(GLOB_RECURSE OPENBLACK_HEADERS "${CMAKE_CURRENT_LIST_DIR}/*.h")

set(OPENBLACK_RC ${CMAKE_SOURCE_DIR}/assets/resource/icon/openblack.rc)

file(GLOB OPENBLACK_IMGUI_VS_SHADERS
     "${CMAKE_SOURCE_DIR}/assets/shaders/imgui/vs_*.sc")
file(GLOB OPENBLACK_IMGUI_FS_SHADERS
     "${CMAKE_SOURCE_DIR}/assets/shaders/imgui/fs_*.sc")
mark_shaders_for_compilation(
  TYPE
  VERTEX
  SHADERS
  ${OPENBLACK_IMGUI_VS_SHADERS}
  VARYING_DEF
  ${CMAKE_SOURCE_DIR}/assets/shaders/imgui/varying.def.sc
  OUTPUT_DIR
  ${CMAKE_BINARY_DIR}/include/generated/shaders/imgui)
mark_shaders_for_compilation(
  TYPE
  FRAGMENT
  SHADERS
  ${OPENBLACK_IMGUI_FS_SHADERS}
  VARYING_DEF
  ${CMAKE_SOURCE_DIR}/assets/shaders/imgui/varying.def.sc
  OUTPUT_DIR
  ${CMAKE_BINARY_DIR}/include/generated/shaders/imgui)

file(GLOB OPENBLACK_VERTEX_SHADERS "${CMAKE_SOURCE_DIR}/assets/shaders/vs_*.sc")
file(GLOB OPENBLACK_FRAGMENT_SHADERS
     "${CMAKE_SOURCE_DIR}/assets/shaders/fs_*.sc")
file(GLOB OPENBLACK_VARYING_DEF_FILE
     "${CMAKE_SOURCE_DIR}/assets/shaders/varying.def.sc")

mark_shaders_for_compilation(
  TYPE
  VERTEX
  SHADERS
  ${OPENBLACK_VERTEX_SHADERS}
  VARYING_DEF
  ${OPENBLACK_VARYING_DEF_FILE}
  OUTPUT_DIR
  ${CMAKE_BINARY_DIR}/include/generated/shaders)
mark_shaders_for_compilation(
  TYPE
  FRAGMENT
  SHADERS
  ${OPENBLACK_FRAGMENT_SHADERS}
  VARYING_DEF
  ${OPENBLACK_VARYING_DEF_FILE}
  OUTPUT_DIR
  ${CMAKE_BINARY_DIR}/include/generated/shaders)

list(APPEND OPENBLACK_SHADERS ${OPENBLACK_IMGUI_VS_SHADERS})
list(APPEND OPENBLACK_SHADERS ${OPENBLACK_IMGUI_FS_SHADERS})
list(APPEND OPENBLACK_SHADERS
            ${CMAKE_SOURCE_DIR}/assets/shaders/imgui/varying.def.sc)
list(APPEND OPENBLACK_SHADERS ${OPENBLACK_VERTEX_SHADERS})
list(APPEND OPENBLACK_SHADERS ${OPENBLACK_FRAGMENT_SHADERS})
list(APPEND OPENBLACK_SHADERS ${OPENBLACK_VARYING_DEF_FILE})

add_library(openblack_lib STATIC)
target_sources(openblack_lib
  PRIVATE
      ${OPENBLACK_SOURCES}
      ${OPENBLACK_HEADERS}
      ${OPENBLACK_RC}
      ${OPENBLACK_SHADERS}
      ${OPENBLACK_VERTEX_SHADERS}
      ${OPENBLACK_FRAGMENT_SHADERS}
      ${OPENBLACK_VARYING_DEF_FILE})
set_target_properties(openblack_lib PROPERTIES LINKER_LANGUAGE CXX)

target_include_directories(
  openblack_lib PUBLIC ${CMAKE_CURRENT_LIST_DIR}
                       ${BULLET_INCLUDE_DIR}
                       ${BULLET_ROOT_DIR}/${BULLET_INCLUDE_DIR}
                       ${CMAKE_CURRENT_BINARY_DIR}/../include)
target_link_directories(openblack_lib PRIVATE ${BULLET_ROOT_DIR}/${BULLET_LIBRARY_DIRS})
target_link_libraries(
  openblack_lib
  PRIVATE
    "$<$<CXX_COMPILER_ID:MSVC>:-SAFESEH:NO>"
    l3d
    pack
    lnd
    anm
    morph
    imgui
    imgui-flame-graph
    ScriptLibrary
    glm::glm
    EnTT::EnTT
    bgfx::bgfx
    cxxopts::cxxopts
    Bullet3Common
    BulletDynamics
    BulletCollision
    BulletSoftBody
    LinearMath
  PUBLIC
    SDL2::SDL2
    spdlog::spdlog
)
if(UNIX)
  find_library(WAYLAND wayland-egl)
  if(WAYLAND)
    target_link_libraries(openblack_lib PRIVATE ${WAYLAND})
  endif()
endif()

target_compile_definitions(openblack_lib
  PRIVATE
  "GLM_FORCE_LEFT_HANDED"
  "GLM_FORCE_RADIANS"
  "GLM_ENABLE_EXPERIMENTAL"
  # Compile-time optimize out log messages (debug level if debug, else info)
  "SPDLOG_ACTIVE_LEVEL=$<IF:$<CONFIG:DEBUG>,SPDLOG_LEVEL_DEBUG,SPDLOG_LEVEL_INFO>"
  # Suppress WinMain() and main hijacking, provided by SDL
  "SDL_MAIN_HANDLED"
  PUBLIC
  "$<$<CONFIG:DEBUG>:OPENBLACK_DEBUG>"
)

if(MSVC)
  target_compile_definitions(openblack_lib
    PRIVATE
    # Get rid of useless crud from windows.h
    NOMINMAX
    WIN32_LEAN_AND_MEAN
    # disable CRT warnings on windows cause they're annoying as shit and we use C
    # functions everywhere
    _CRT_SECURE_NO_WARNINGS
    )

  target_compile_options(openblack_lib PRIVATE
    # Level 4 warnings
    /W4
    # Disable nonstandard extension used: nameless struct/union from glm
    /wd4201
    # Multi-threaded
    /MP
    # Enables stricter C++ standards conformance checks
    /permissive-
    )

  # Debug builds create a debug console
  set_target_properties(openblack_lib PROPERTIES LINK_FLAGS_DEBUG
                                             "/SUBSYSTEM:CONSOLE")
  set_target_properties(openblack_lib PROPERTIES LINK_FLAGS_RELWITHDEBINFO
                                             "/SUBSYSTEM:CONSOLE")
  set_target_properties(openblack_lib PROPERTIES COMPILE_DEFINITIONS_DEBUG
                                             "_CONSOLE")

  # Release builds also have a console, for now..
  set_target_properties(openblack_lib PROPERTIES LINK_FLAGS_RELEASE
                                             "/SUBSYSTEM:CONSOLE")
  set_target_properties(openblack_lib PROPERTIES COMPILE_DEFINITIONS_RELEASE
                                             "CONSOLE")
  set_target_properties(openblack_lib PROPERTIES LINK_FLAGS_MINSIZEREL
                                             "/SUBSYSTEM:CONSOLE")

  if (OPENBLACK_WARNINGS_AS_ERRORS)
    target_compile_options(openblack_lib PRIVATE /WX)
  endif()
else()
  target_compile_options(openblack_lib PRIVATE
    -Wall
    -Wextra
    -pedantic
    -Wno-unused-private-field
    -Wno-unused-variable
    -Wno-unused-parameter)
  if (OPENBLACK_WARNINGS_AS_ERRORS)
    target_compile_options(openblack_lib PRIVATE -Werror)
  endif()
endif()

set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT
                                                            openblack)
source_group(TREE ${CMAKE_CURRENT_LIST_DIR} FILES ${OPENBLACK_SOURCES}
             ${OPENBLACK_HEADERS})

foreach(SHADER ${OPENBLACK_SHADERS})
  source_group("Shaders" FILES "${SHADER}")
endforeach()

add_executable(openblack main.cpp)
target_link_libraries(openblack PRIVATE openblack_lib)

# Installation configuration
install(TARGETS openblack RUNTIME DESTINATION bin)
install(
  FILES ../externals/imgui/LICENSE.txt
  DESTINATION "share/licenses/openblack"
  RENAME "IMGUI_LICENSE.txt")
if(UNIX)
  install(FILES "${CMAKE_SOURCE_DIR}/assets/resource/shortcut/openblack.desktop"
          DESTINATION "share/applications")
  foreach(RES 64 128 256)
    install(
      FILES
        "${CMAKE_SOURCE_DIR}/assets/resource/icon/openblack-${RES}x${RES}.png"
      DESTINATION "share/icons/hicolor/${RES}x${RES}/apps"
      RENAME "openblack.png")
  endforeach()
endif()
