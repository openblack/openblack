name: Cross Compile CI
on:
  pull_request_target:
  push:
    tags:
      - '*'
    branches:
      - 'master'
      - 'ci-tests/**'  # Branch namespace can be used to test changes to test before going to master
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # This is the matrix. They form permutations.
        os: [ubuntu-latest]
        preset: [android-armeabi-v7a-vcpkg, android-arm64-v8a-vcpkg, android-x86-vcpkg, android-x86_64-vcpkg]
        triplet: [""]
        # TODO(#519) x86 disabled due to failing to find stdlib headers on workflows
        # include:
        #   # Testing x86-windows bit in debug only
        #   - os: windows-latest
        #     preset: ninja-multi-vcpkg
        #     triplet: x86-windows

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          submodules: recursive

      - name: Add base repo to git config
        run: git remote add upstream ${{ github.event.pull_request.base.repo.html_url }}
        if: startsWith(github.event_name, 'pull_request')

      - name: Install Linux dependencies
        run: |
          sudo apt update -y
          sudo apt install -y libgl1-mesa-dev libglu1-mesa-dev
        if: startsWith(matrix.os, 'ubuntu')

      - name: Install EMSDK
        run: |
          git clone https://github.com/emscripten-core/emsdk ${EMSDK}
          pushd ${EMSDK}
          ./emsdk install latest
          ./emsdk activate latest
        if: matrix.preset == 'emscripten-vcpkg'

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest

      - name: Restore from cache and setup vcpkg executable and data files.
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Run CMake+vcpkg to build packages.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: '${{ matrix.preset }}'
          configurePresetAdditionalArgs: "['-DOPENBLACK_WARNINGS_AS_ERRORS=ON']"

      - name: Run CMake+Ninja to build the code (Debug).
        uses: lukka/run-cmake@v10
        with:
          buildPreset: '${{ matrix.preset }}-debug'

      - name: Run CMake+vcpkg to build the code (Release).
        uses: lukka/run-cmake@v10
        with:
          buildPreset: '${{ matrix.preset }}-release'

      - uses: actions/upload-artifact@v3
        with:
          name: openblack-${{ matrix.triplet || matrix.preset }}-${{github.sha}}
          path: cmake-build-presets/${{ matrix.preset }}/bin
          if-no-files-found: error

    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      EMSDK: '/tmp/emsdk'
      ANDROID_NDK_HOME: '/usr/local/lib/android/sdk/ndk/23.2.8568313'

  assemble-android-apk:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # This is the matrix. They form permutations.
        os: [ ubuntu-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install Linux dependencies
        run: |
          sudo apt update -y
          sudo apt install -y libgl1-mesa-dev libglu1-mesa-dev
        if: startsWith(matrix.os, 'ubuntu')
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Run Gradle Configure CMake (Debug)
        uses: gradle/gradle-build-action@v2
        with:
          arguments: --configuration-cache configureCMakeDebug
          build-root-directory: android
      - name: Run Gradle Configure CMake (Release)
        uses: gradle/gradle-build-action@v2
        with:
          arguments: --configuration-cache configureCMakeRelWithDebInfo
          build-root-directory: android
      - name: Run Gradle Assemble (Debug)
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assembleDebug
          build-root-directory: android
      - name: Run Gradle Assemble (Release)
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assembleRelease
          build-root-directory: android
      - uses: actions/upload-artifact@v3
        with:
          name: openblack-android-apk-${{github.sha}}
          path: android/app/build/outputs/apk
          if-no-files-found: error
