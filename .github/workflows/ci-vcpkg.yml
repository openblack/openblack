name: VCPKG CI
on:
  pull_request_target:
  push:
    tags:
    branches:
      - 'master'
      - 'ci-tests/**'  # Branch namespace can be used to test changes to test before going to master
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # This is the matrix. They form permutations.
        os: [ubuntu-22.04, macos-latest, windows-latest]
        cc: [""]
        cxx: [""]
        # These are additional individual jobs. There are no permutations of these.
        include:
          # Testing clang
          - os: ubuntu-22.04
            cc: clang-12
            cxx: clang++-12
          - os: ubuntu-20.04
            cc: gcc-10
            cxx: g++-10
          - os: ubuntu-20.04
            cc: clang
            cxx: clang++

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          submodules: recursive

      - name: Add base repo to git config
        run: git remote add upstream ${{ github.event.pull_request.base.repo.html_url }}
        if: startsWith(github.event_name, 'pull_request')

      - name: Install Linux dependencies
        run: |
          sudo apt update -y
          sudo apt install -y libgl1-mesa-dev libglu1-mesa-dev clang-tidy
        if: startsWith(matrix.os, 'ubuntu')

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest

      - name: Restore artifacts, or setup vcpkg for building artifacts
        uses: lukka/run-vcpkg@v10
        id: runvcpkg
        with:
          vcpkgJsonGlob: 'vcpkg.json'
          # Prevent ubuntu-latest and ubuntu-latest (clang) from having the same key
          appendedCacheKey: ${{matrix.cc}}
            # doNotCache: true

      - name: Configure CMake+vcpkg+Ninja to generate.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          configurePresetCmdString: "[`--preset`, `$[env.CONFIGURE_PRESET_NAME]`, `-DCMAKE_EXPORT_COMPILE_COMMANDS=ON`, `-DOPENBLACK_WARNINGS_AS_ERRORS=ON`]"
        env:
          CC: ${{matrix.cc}}
          CXX: ${{matrix.cxx}}

      - name: Run CMake+vcpkg+Ninja+CTest to build/test (Debug).
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          configurePresetCmdString: "[`--preset`, `$[env.CONFIGURE_PRESET_NAME]`, `-DOPENBLACK_WARNINGS_AS_ERRORS=ON`]"
          buildPreset: 'ninja-multi-vcpkg-debug'
          testPreset: 'ninja-multi-vcpkg-debug'
        env:
          CC: ${{matrix.cc}}
          CXX: ${{matrix.cxx}}

      - name: Run CMake+vcpkg+Ninja+CTest to build/test (Release).
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          configurePresetCmdString: "[`--preset`, `$[env.CONFIGURE_PRESET_NAME]`, `-DOPENBLACK_WARNINGS_AS_ERRORS=ON`]"
          buildPreset: 'ninja-multi-vcpkg-release'
          testPreset: 'ninja-multi-vcpkg-release'
        env:
          CC: ${{matrix.cc}}
          CXX: ${{matrix.cxx}}

      - name: Upload compile database and system includes
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.os, 'ubuntu')
        with:
          name: openblack-compile-database
          path: |
            cmake-build-presets/ninja-multi-vcpkg/include
            cmake-build-presets/ninja-multi-vcpkg/vcpkg_installed/x64-linux/include
            cmake-build-presets/ninja-multi-vcpkg/compile_commands.json
          if-no-files-found: error

      - name: Upload compiled openblack and tools
        uses: actions/upload-artifact@v3
        if: matrix.cc == ''
        with:
          name: openblack-${{ matrix.os }}-${{github.sha}}
          path: cmake-build-presets/ninja-multi-vcpkg/bin
          if-no-files-found: error

      - name: Upload generated test data
        uses: actions/upload-artifact@v3
        if: matrix.cc == ''
        with:
          name: openblack-test-data
          path: |
            cmake-build-presets/ninja-multi-vcpkg/test/mobile_wall_hug
            cmake-build-presets/ninja-multi-vcpkg/test/mock/Scripts
            cmake-build-presets/ninja-multi-vcpkg/test/mock/Data
          if-no-files-found: error

    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}

  clang-tidy:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.event_name, 'pull_request')
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          submodules: recursive
      - name: Download generated compile database
        uses: actions/download-artifact@v3
        with:
          name: openblack-compile-database
          path: cmake-build-presets/ninja-multi-vcpkg
      - name: Add base repo to git config
        run: git remote add upstream ${{ github.event.pull_request.base.repo.html_url }}
        if: startsWith(github.event_name, 'pull_request')
      - uses: ZedThree/clang-tidy-review@v0.9.0
        id: review
        with:
          build_dir: cmake-build-presets/ninja-multi-vcpkg
          config_file: '.clang-tidy'
          clang_tidy_version: 12
          apt_packages: g++-10 # g++-9 doesn't support all of c++20 like spans
          exclude: "*ShaderIncluder.h,*json.hpp"
          lgtm_comment_body: "" # don't post a lgtm message
      - name: If there are any comments, fail the check
        if: steps.review.outputs.total_comments > 0
        run: exit 1

  run:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # This is the matrix. They form permutations.
        os: [ ubuntu-22.04, macos-latest, windows-latest ]
    steps:
      - name: Download compiled openblack and tools
        uses: actions/download-artifact@v3
        id: download-binary
        with:
          name: openblack-${{ matrix.os }}-${{github.sha}}
      - name: Download generated mock data
        uses: actions/download-artifact@v3
        id: download-test
        with:
          name: openblack-test-data
          path: cmake-build-presets/ninja-multi-vcpkg/test
      - name: Enable execute permissions on binary
        run: chmod +x ${{steps.download-binary.outputs.download-path}}/*/*
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
      - run: ${{steps.download-binary.outputs.download-path}}/Debug/openblack -g ${{steps.download-test.outputs.download-path}}/mock -b Noop --num-frames-to-simulate 10 --log-file stdout --log-level all=debug
      - run: ${{steps.download-binary.outputs.download-path}}/Release/openblack -g ${{steps.download-test.outputs.download-path}}/mock -b Noop --num-frames-to-simulate 10 --log-file stdout --log-level all=debug
      - name: Install valgrind and libc6-dbg
        run: |
          sudo apt update -y
          sudo apt install -y valgrind
        if: startsWith(matrix.os, 'ubuntu')
      - name: Check unittests for memory leaks
        run:  |
          for test in ${{steps.download-binary.outputs.download-path}}/Debug/test* ; do
              echo Running valgrind on $test
              valgrind --tool=memcheck --track-origins=yes --leak-check=full -s --error-exitcode=1 "$test"
          done
        if: startsWith(matrix.os, 'ubuntu')
      - name: Check openblack for memory leaks
        run: valgrind --tool=memcheck --track-origins=yes --leak-check=full -s --error-exitcode=1 ${{steps.download-binary.outputs.download-path}}/Debug/openblack -g ${{steps.download-test.outputs.download-path}}/mock -b Noop --num-frames-to-simulate 10  --log-level all=error
        if: startsWith(matrix.os, 'ubuntu')

  screenshot:
    needs: run
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # This is the matrix. They form permutations.
        os: [ windows-latest ] # ubuntu-latest, macos-latest
    env:
      ARGS: -g game-data\bw --num-frames-to-simulate 10 --screenshot-frame 5 --log-file stdout --log-level all=debug -W 800 -H 600
      BACKEND: Direct3D11
    steps:
      - name: Download compiled openblack and tools
        uses: actions/download-artifact@v3
        id: download-binary
        with:
          name: openblack-${{ matrix.os }}-${{github.sha}}
      - name: Download generated mock data
        uses: actions/download-artifact@v3
        id: download-test
        with:
          name: openblack-test-data
      - name: Enable execute permissions on binary
        run: chmod +x ${{steps.download-binary.outputs.download-path}}/*/*
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      - name: Download Pre-patched and installed Game Data
        uses: suisei-cn/actions-download-file@v1
        id: game-data
        with:
          url: ${{secrets.BW_DOWNLOAD_URL}}
          filename: bw.7z
          target: game-data
      - name: Extract Game Data
        run: 7z x -ogame-data\bw "$PWD\game-data\${{steps.game-data.outputs.filename}}"
      - run: ${{steps.download-binary.outputs.download-path}}/Debug/openblack   ${{env.ARGS}} -b ${{env.BACKEND}} -s Land1.txt --screenshot-path "screenshot-${{matrix.os}}-${{github.sha}}-debug-land-1.png"
      - run: ${{steps.download-binary.outputs.download-path}}/Release/openblack ${{env.ARGS}} -b ${{env.BACKEND}} -s Land1.txt --screenshot-path "screenshot-${{matrix.os}}-${{github.sha}}-release-land-1.png"
      - name: Upload screenshots
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: openblack-screenshots
          path: screenshot-${{ matrix.os }}-${{github.sha}}-*.png
          if-no-files-found: error
