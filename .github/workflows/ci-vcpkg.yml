name: VCPKG CI
on:
  pull_request_target:
  push:
    tags:
    branches:
      - 'master'
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # This is the matrix. They form permutations.
        os: [ubuntu-latest, macos-latest, windows-latest, windows-2019]
        cc: [""]
        cxx: [""]
        # These are additional individual jobs. There are no permutations of these.
        include:
          # Testing clang
          - os: ubuntu-latest
            cc: clang
            cxx: clang++

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          submodules: recursive

      - name: Install Linux dependencies
        run: |
          sudo apt update -y
          sudo apt install -y libgl1-mesa-dev libglu1-mesa-dev clang-tidy
        if: startsWith(matrix.os, 'ubuntu')

      - name: Set GCC 10
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10
        if: matrix.os == 'ubuntu-latest' && matrix.cc == ''

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest

      - name: Restore artifacts, or setup vcpkg for building artifacts
        uses: lukka/run-vcpkg@v10
        id: runvcpkg
        with:
          vcpkgJsonGlob: 'vcpkg.json'
          # Prevent ubuntu-latest and ubuntu-latest (clang) from having the same key
          appendedCacheKey: ${{matrix.cc}}
            # doNotCache: true

      - name: Configure CMake+vcpkg+Ninja to generate.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          configurePresetCmdString: "[`--preset`, `$[env.CONFIGURE_PRESET_NAME]`, `-DOPENBLACK_CLANG_TIDY_CHECKS=ON`, `-DOPENBLACK_WARNINGS_AS_ERRORS=ON`]"
        env:
          CC: ${{matrix.cc}}
          CXX: ${{matrix.cxx}}

      - name: Run CMake+vcpkg+Ninja+CTest to build/test (Debug).
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          configurePresetCmdString: "[`--preset`, `$[env.CONFIGURE_PRESET_NAME]`, `-DOPENBLACK_CLANG_TIDY_CHECKS=ON`, `-DOPENBLACK_WARNINGS_AS_ERRORS=ON`]"
          buildPreset: 'ninja-multi-vcpkg-debug'
          testPreset: 'ninja-multi-vcpkg-debug'
        env:
          CC: ${{matrix.cc}}
          CXX: ${{matrix.cxx}}

      - name: Run CMake+vcpkg+Ninja+CTest to build/test (Release).
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          configurePresetCmdString: "[`--preset`, `$[env.CONFIGURE_PRESET_NAME]`, `-DOPENBLACK_CLANG_TIDY_CHECKS=ON`, `-DOPENBLACK_WARNINGS_AS_ERRORS=ON`]"
          buildPreset: 'ninja-multi-vcpkg-release'
          testPreset: 'ninja-multi-vcpkg-release'
        env:
          CC: ${{matrix.cc}}
          CXX: ${{matrix.cxx}}

      - name: Upload compiled openblack and tools
        uses: actions/upload-artifact@v3
        if: matrix.cc == ''
        with:
          name: openblack-${{ matrix.os }}-${{github.sha}}
          path: cmake-build-presets/ninja-multi-vcpkg/bin
          if-no-files-found: error

      - name: Upload generated mock data
        uses: actions/upload-artifact@v3
        if: matrix.cc == ''
        with:
          name: openblack-mock-data
          path: cmake-build-presets/ninja-multi-vcpkg/test/mock
          if-no-files-found: error

    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}

  run:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # This is the matrix. They form permutations.
        os: [ ubuntu-latest, macos-latest, windows-latest, windows-2019 ]
    steps:
      - name: Download compiled openblack and tools
        uses: actions/download-artifact@v3
        id: download-binary
        with:
          name: openblack-${{ matrix.os }}-${{github.sha}}
      - name: Download generated mock data
        uses: actions/download-artifact@v3
        id: download-mock
        with:
          name: openblack-mock-data
          path: cmake-build-presets/ninja-multi-vcpkg/test/mock
      - name: Enable execute permissions on binary
        run: chmod +x ${{steps.download-binary.outputs.download-path}}/*/*
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
      - run: ${{steps.download-binary.outputs.download-path}}/Debug/openblack -g ${{steps.download-mock.outputs.download-path}} -b Noop --num-frames-to-simulate 10 --log-file stdout --log-level all=debug
      - run: ${{steps.download-binary.outputs.download-path}}/Release/openblack -g ${{steps.download-mock.outputs.download-path}} -b Noop --num-frames-to-simulate 10 --log-file stdout --log-level all=debug
      - name: Install valgrind and libc6-dbg
        run: |
          sudo apt update -y
          sudo apt install -y valgrind
        if: startsWith(matrix.os, 'ubuntu')
      - name: Check unittests for memory leaks
        run:  |
          for test in ${{steps.download-binary.outputs.download-path}}/Debug/test* ; do
              echo Running valgrind on $test
              valgrind --tool=memcheck --track-origins=yes --leak-check=full -s --error-exitcode=1 "$test"
          done
        if: startsWith(matrix.os, 'ubuntu')
      - name: Check openblack for memory leaks
        run: valgrind --tool=memcheck --track-origins=yes --leak-check=full -s --error-exitcode=1 ${{steps.download-binary.outputs.download-path}}/Debug/openblack -g ${{steps.download-mock.outputs.download-path}} -b Noop --num-frames-to-simulate 10  --log-level all=error
        if: startsWith(matrix.os, 'ubuntu')
