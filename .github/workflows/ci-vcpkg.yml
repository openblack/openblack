name: VCPKG CI
on:
  pull_request_target:
  push:
    tags:
      - '*'
    branches:
      - 'master'
      - 'ci-tests/**'  # Branch namespace can be used to test changes to test before going to master
jobs:
  clang-tidy-review:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # This is the matrix. They form permutations.
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    if: startsWith(github.event_name, 'pull_request')
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          submodules: recursive

      - name: Add base repo to git config
        run: git remote add upstream ${{ github.event.pull_request.base.repo.html_url }}
        if: startsWith(github.event_name, 'pull_request')

      - name: Install Linux dependencies
        run: |
          sudo apt update -y
          sudo apt install -y libgl1-mesa-dev libglu1-mesa-dev
        if: startsWith(matrix.os, 'ubuntu')

      - name: Install MacOS dependencies
        run: |
          brew install pkg-config
          mkdir -p ~/bin
          ln -s $(brew --prefix llvm@15)/bin/clang-tidy ~/bin/clang-tidy
          echo "export PATH=$PATH:~/bin" >> $GITHUB_ENV
        if: startsWith(matrix.os, 'macos')

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest

      - name: Restore from cache and setup vcpkg executable and data files.
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Run CMake+vcpkg to build packages.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'ninja-multi-vcpkg'
          configurePresetAdditionalArgs: "['-DCMAKE_EXPORT_COMPILE_COMMANDS=ON', '-DOPENBLACK_WARNINGS_AS_ERRORS=ON', '-DOPENBLACK_TRACE_TIME=ON']"

      - uses: actions/upload-artifact@v3
        with:
          name: CompilationDatabase-${{matrix.os}}
          path: cmake-build-presets/ninja-multi-vcpkg/compile_commands.json

      - name: Checkout clang-tidy-review
        uses: actions/checkout@v4
        with:
          repository: bwrsandman/clang-tidy-review
          ref: master
          path: clang-tidy-review

      - name: Non-docker clang-tidy-check
        run: |
          clang-tidy --version
          python3 -m pip install pip -U
          python3 -m pip install ${{github.workspace}}/clang-tidy-review/post/clang_tidy_review
          review --token=${{ secrets.GITHUB_TOKEN }} --repo=openblack/openblack --pr=${{ github.event.pull_request.number }} --clang_tidy_binary=clang-tidy --build_dir=cmake-build-presets/ninja-multi-vcpkg --config_file=.clang-tidy --split_workflow=True
        env:
          USER: ${{ github.event.pull_request.user.login }}

      - uses: actions/upload-artifact@v3
        with:
          name: ClangTidyReviewOutputs-${{matrix.os}}
          path: |
            clang-tidy-review-metadata.json
            clang-tidy-review-output.json
            clang_tidy_review.yaml

  clang-tidy-comments:
    runs-on: ubuntu-latest
    needs: clang-tidy-review
    steps:
      - name: Checkout clang-tidy-review
        uses: actions/checkout@v4
        with:
          repository: bwrsandman/clang-tidy-review
          ref: master
          path: clang-tidy-review

      - uses: actions/download-artifact@v3
        with:
          name: ClangTidyReviewOutputs-ubuntu-latest
          path: ubuntu-latest

      - uses: actions/download-artifact@v3
        with:
          name: ClangTidyReviewOutputs-macos-latest
          path: macos-latest

      - uses: actions/download-artifact@v3
        with:
          name: ClangTidyReviewOutputs-windows-latest
          path: windows-latest

      - name: Non-docker clang-tidy-check
        run: |
          clang-tidy --version
          python3 -m pip install pip -U
          python3 -m pip install ${{github.workspace}}/clang-tidy-review/post/clang_tidy_review
          cp ubuntu-latest/clang-tidy-review-metadata.json .
          post --token=${{ secrets.GITHUB_TOKEN }} --repo=openblack/openblack ubuntu-latest/clang-tidy-review-output.json macos-latest/clang-tidy-review-output.json windows-latest/clang-tidy-review-output.json
